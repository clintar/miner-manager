#!/bin/bash
##########################################################################
# NVIDIA requires Xorg server to run and packge jq is 			##
# also required for parsing config  "apt install jq"			##
# Generate /etc/X11/xorg.conf by using this command: 			##
# "nvidia-xconfig -a --cool-bits=28 --allow-empty-initial-configuration"##
# Remember to start Xorg before executing this script!			##
# The script itself - DO NOT EDIT !!! EDIT /etc/conf.json		##
##########################################################################

Logger(){
        test -t 1 && echo "`date +%Y.%m.%d-%H:%M:%S` [@$host_name] [$$] $*"
        test -z $log_file && \
                log_file="/var/run/xmineos.out"
        echo "`date +%Y.%m.%d-%H:%M:%S` [@$host_name] [$$] $*" >> $log_file
    }
CONFPATH='.'
JSON=`cat $CONFPATH/conf.json`
Vendor=`echo $JSON | jq -r .gpuVendor`
############################################################
## Getting GPU Count configured in your conf.json         ##
############################################################
# Getting GPU Cards
  if [ "$Vendor" == "nvidia" ]; then
    GPU_COUNT=`echo $JSON | jq '.nvidia[] | .gpuSettings[] |  .gpu_id' |wc -l`
  elif [ "$Vendor" == "amdgpu" ]; then
    GPU_COUNT=`echo $JSON | jq '.amdgpu[] | .gpuSettings[] |  .gpu_id' |wc -l`
  else
    Logger "Get going, no GPU defined"
    exit 0
  fi
########################################################################################
## Miner Settings Below - DO NOT EDIT, USE /etc/conf.json to change variables         ##
########################################################################################
miner=`echo $JSON | jq -r '.minerSettings[] | .miner'`
minerAlgo=`echo $JSON | jq -r '.minerSettings[] | .mAlgo'`
minerSSL=`echo $JSON | jq -r '.minerSettings[] | .mSSL'`
minerPath=`echo $JSON | jq -r '.minerSettings[] | .mPath'`
minerHost=`echo $JSON | jq -r '.minerSettings[] | .mHost'`
minerPort=`echo $JSON | jq -r '.minerSettings[] | .mPort'`
minerWallet=`echo $JSON | jq -r '.minerSettings[] | .mWallet'`
minerWorker=`echo $JSON | jq -r '.minerSettings[] | .mWorker'`
minerPass=`echo $JSON | jq -r '.minerSettings[] | .mPass'`
minerOpts=`echo $JSON | jq -r '.minerSettings[] | .mOpts'`
# END
case "$1" in
   --start)
export GPU_MAX_HEAP_SIZE=100
export GPU_USE_SYNC_OBJECTS=1
export GPU_MAX_ALLOC_PERCENT=100

if [ $miner == "ethminer" ] && [ $Vendor == "nvidia" ]; then
	screen -dmS miner $minerPath/ethminer/ethminer -U -RH -S $minerHost:$minerPort -O $minerWallet.$minerWorker:$minerPass $minerOpts
elif  [ $miner == "ethminer" ] && [ $Vendor == "amdgpu" ]; then
	screen -dmS miner $minerPath/ethminer/ethminer -G -RH -S $minerHost:$minerPort -O $minerWallet.$minerWorker:$minerPass $minerOpts
elif [ $miner == "ewbf" ] && [ $Vendor == "nvidia" ]; then
	screen -dmS miner $minerPath/ewbf/miner --server $minerHost --port $minerPort -user $minerWallet.$minerWorker --pass $minerPass $minerOpts
elif [ $miner == "claymore" ] && [ $Vendor == "amdgpu" ] && [ $minerAlgo == "equihash" ] && [ $minerSSL == "enabled" ]; then
	screen -dmS miner $minerPath/claymore-equihash/zecminer64 -zpool ssl://$minerHost:$minerPort -zwal $minerWallet.$minerWorker -zpsw $minerPass $minerOpts
elif [ $miner == "claymore" ] && [ $Vendor == "amdgpu" ] && [ $minerAlgo == "equihash" ] && [ $minerSSL == "disabled" ]; then
	screen -dmS miner $minerPath/claymore-equihash/zecminer64 -zpool $minerHost:$minerPort -zwal $minerWallet.$minerWorker -zpsw $minerPass $minerOpts
elif [ $miner == "claymore" ] && [ $minerAlgo == "ethash" ]; then
	screen -dmS miner $minerPath/claymore-ethash/ethdcrminer64 -epool $minerHost:$minerPort -ewal $minerWallet -eworker $minerWorker -epsw $minerPass $minerOpts
else
	Logger "Something went wrong or no miner defined"
exit 0
fi
Logger "Miner $miner started on $minerHost:$minerPort. Wallet: $minerWallet, Worker: $minerWorker. Options: $minerOpts"
;;
   --monitor)
if [ $Vendor == "nvidia" ]; then
        Logger "Hit CTRL+C to exit"
        sleep 2
	watch -n60 -t -d "nvidia-smi --query-gpu=index,pci.bus_id,clocks.current.graphics,clocks.current.memory,temperature.gpu,fan.speed,power.draw,power.limit,utilization.gpu,utilization.memory,pstate --format=csv"
elif [ $Vendor == "amdgpu" ]; then
	watch -n60 -t -d "/usr/local/bin/statgpu" # Under development
else
	Logger "No Vendor defined"
exit 0
fi
;;
   --watchdog)
########################################################################################
## Setup crontab "*/5 * * * * /usr/local/bin/minermanager --watchdog >/dev/null"      ##
########################################################################################
x=0
while [ $x -lt $GPU_COUNT ]; do
if [ $Vendor == "nvidia" ]; then
POWER_THRESHOLD=`echo $JSON | jq -r '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .PowTHD'`
    Logger "Checking for dead nVidia GPUs..."
    power_draw=$(nvidia-smi --id=$x --query-gpu=power.draw --format=csv,noheader,nounits)
    if (( $(echo "$power_draw < $POWER_THRESHOLD" | bc -l) ))
    then
      Logger  "Power dropped below threshold (${POWER_THRESHOLD} W)!, NVGPU $x: $power_draw W, Restarting..."
#################################################
## Place "force_reboot.sh" in "/usr/local/bin" ##
#################################################
     /usr/local/bin/force_reboot.sh
    else
      Logger "Normal power usage for nVidia GPU $x: $power_draw W"
    fi
elif [ $Vendor == "amdgpu" ]; then
POWER_THRESHOLD=`echo $JSON | jq -r '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .PowTHD'`
    Logger "Checking for dead AMD GPUs..."
    power_draw=$(cat /sys/kernel/debug/dri/$x/amdgpu_pm_info |grep '(average GPU)'|awk '{print $1}'| sed 's/ //g')
    if (( $(echo "$power_draw < $POWER_THRESHOLD" | bc -l) ))
    then
      Logger  "Power dropped below threshold (${POWER_THRESHOLD} W)!, AMDGPU $x: $power_draw W, Restarting..."
#################################################
## Place "force_reboot.sh" in "/usr/local/bin" ##
#################################################
     /usr/local/bin/force_reboot.sh
    else
      Logger "Normal power usage for AMD GPU $x: $power_draw W"
    fi
else
     Logger "No Vendor defined"
exit 0
fi
x=$((x+1))
done
;;
   --stop)
screen -S miner -X quit
Logger "Miner stopped"
;;
   --mstat)
mStats=`screen -x miner -X hardcopy /tmp/miner && cat /tmp/miner | grep . | tail -n 10`
Logger "Current status: $mStats"
;;
   --setclocks)
x=0
while [ $x -lt $GPU_COUNT ]; do
####################
## GPU VARIABLES  ##
####################
if [ $Vendor == "nvidia" ]; then
Core=`echo $JSON | jq -r '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .Core'`
Mem=`echo $JSON | jq -r '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .Mem'`
PowLim=`echo $JSON | jq -r '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .PowLim'`

minpLim=`nvidia-smi -i $x -q -d POWER |grep "Min Power Limit" |awk '{print $5}' | cut -d"." -f1  |xargs`
maxpLim=`nvidia-smi -i $x -q -d POWER |grep "Max Power Limit" |awk '{print $5}' | cut -d"." -f1  |xargs`

if [ $PowLim -ge $minpLim ] && [ $PowLim -le $maxpLim ]; then
nvidia-smi -i $x -pm 0 >/dev/null
nvidia-smi -i $x -pl $PowLim >/dev/null
Logger "PowerLimit was set to $PowLim for GPU: $x"
else
Logger "Powerlimit is not supported on GPU: $x"
fi
	Logger "Enabling PowerMizerMode anyway"
        DISPLAY=:0.$x /usr/bin/nvidia-settings -a [gpu:$x]/GPUPowerMizerMode=1 >/dev/null
        DISPLAY=:0.$x /usr/bin/nvidia-settings -a [gpu:$x]/GPUGraphicsClockOffsetAllPerformanceLevels=$CoreOff >/dev/null
	Logger "Core was clocked with Offset of $CoreOff for GPU: $x"
        DISPLAY=:0.$x /usr/bin/nvidia-settings -a [gpu:$x]/GPUMemoryTransferRateOffsetAllPerformanceLevels=$MemOff >/dev/null
        Logger "Memory was clocked with Offset of $MemOff for GPU: $x"
elif [ $Vendor == "amdgpu" ]; then
Core=`echo $JSON | jq -r '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .Core'`
Mem=`echo $JSON | jq -r '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .Mem'`
PowTune=`echo $JSON | jq -r '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .PowTune'`
Series=`echo $JSON | jq -r '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .Series'`
     if [ "$PowTune" -gt "0" ] && [ "$PowTune" -le "7" ] && [ "$Core" -gt "0" ]; then
            coreState=$PowTune
        Logger "Setting PowerTune for AMD GPU${x} to dpm state ${coreState}"
        echo "manual" > /sys/class/drm/card$x/device/power_dpm_force_performance_level
        echo "$coreState}" > /sys/class/drm/card$x/device/pp_dpm_sclk >/dev/null
        for i in $(seq $coreState 7); do
        /usr/local/bin/ohgodatool -i $x --core-state $i --core-clock ${Core}
        done
     else
        Logger"Core State is undefined, leaving default..."
     fi
     if [ "$Series" == "500" ] && [ $Mem -gt 300 ] && [ $Mem -le 2300 ]; then
        /usr/local/bin/ohgodatool -i $x --mem-state 2 --mem-clock ${Mem} >/dev/null
        Logger "Memory on $Series AMDGPU was clocked to ${Mem}Mhz for GPU: $x"
        elif [ "$Series" == "400" ] && [ $Mem -gt 300 ] && [ $Mem -le 2300 ]; then
        /usr/local/bin/ohgodatool -i $x --mem-state 1 --mem-clock ${Mem} >/dev/null
        Logger "Memory on $Series AMDGPU was clocked to ${Mem}Mhz for GPU: $x"
        else
        Logger "Unsupported or Undefined OC Values - refer to manual"
     fi
fi
x=$((x+1))
done
;;
    --setvoltage)
x=0
while [ $x -lt $GPU_COUNT ]; do
#####################
## VOLT VARIABLES  ##
#####################
if [ "$Vendor" == "nvidia" ]; then
Logger "nVidia is not supporting direct voltage set currently"
elif [ "$Vendor" == "amdgpu" ]; then
        voltage=`echo $JSON | jq -r '.amdgpu[] | .gpudSettings[] |  select('.gpu_id' == '$x')| .gpu_volt'`
        if [ "$voltage" != 0 ]; then
        /usr/local/bin/voltset --index $x --voltage $voltage >/dev/null
        Logger "Voltage set to $voltage for AMD GPU: $x"
        fi
fi
x=$((x+1))
done
;;
    --setfanspeed)
x=0
while [ $x -lt $GPU_COUNT ]; do
if [ $Vendor == "nvidia" ]; then
	TempTarget=`echo $JSON | jq '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .TempTarget'`
	FanSpeed=`echo $JSON | jq '.nvidia[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .MinFan'`
elif [ $Vendor == "amdgpu" ]; then
        TempTarget=`echo $JSON | jq '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .TempTarget'`
        FanSpeed=`echo $JSON | jq '.amdgpu[] | .gpuSettings[] |  select('.gpu_id' == '$x')| .MinFan'`
fi
if [ $Vendor == "nvidia" ]; then
        GPU_FAN=`nvidia-smi -q --gpu=$x |grep "Fan Speed" | awk -F  " " '{print $4}' | tr -d '%'`
        GPU_TEMP=`nvidia-smi -q --gpu=$x |grep "GPU Current Temp" | awk -F  " " '{print $5}' | tr -d 'C'`
elif [ $Vendor == "amdgpu" ]; then
	GPU_FAN=`/usr/local/bin/ohgodatool -i $x --show-fanspeed | tr -d '%'`
	GPU_TEMP=`/usr/local/bin/ohgodatool -i $x  --show-temp | tr -d 'C'`
fi
# This is calculating current temp + target temp to adjust proper fanspeed
    FAN_UP_STEP=30
    FAN_DOWN_STEP=2

DIFF=`echo "$((TempTarget-GPU_TEMP))" | sed 's/-//g'`

if [ $DIFF -ge 7 ]; then
    FAN_UP_STEP=100
    FAN_DOWN_STEP=2
elif [ $DIFF -ge 5 ]; then
    FAN_UP_STEP=30
    FAN_DOWN_STEP=1
elif [ $DIFF -ge 4 ]; then
    FAN_UP_STEP=12
    FAN_DOWN_STEP=1
elif [ $DIFF -ge 3 ]; then
    FAN_UP_STEP=8
    FAN_DOWN_STEP=1
elif [ $DIFF -ge 2 ]; then
    FAN_UP_STEP=1
    FAN_DOWN_STEP=1
elif [ $DIFF -ge 1 ]; then
    FAN_UP_STEP=1
    FAN_DOWN_STEP=0
elif [ $DIFF -ge 0 ]; then
    FAN_UP_STEP=0
    FAN_DOWN_STEP=0

fi

NEW_GPU_FAN=$GPU_FAN

    if [ $GPU_TEMP -gt $((TempTarget)) ]; then
        NEW_GPU_FAN=$(( GPU_FAN + FAN_UP_STEP ))
    fi

    if [ $GPU_TEMP -lt $((TempTarget-2)) ]; then
        NEW_GPU_FAN=$(( GPU_FAN - FAN_DOWN_STEP ))
    fi


if [ $NEW_GPU_FAN -le $FanSpeed ]; then
    NEW_GPU_FAN=$FanSpeed
fi

if [ $NEW_GPU_FAN -ge 100 ]; then
    NEW_GPU_FAN=100
fi
# End calculation its time to set proper fanspeed
if [ $Vendor == "nvidia" ]; then
	DISPLAY=:0.$x /usr/bin/nvidia-settings -a [gpu:$x]/GPUFanControlState=1 -a [fan:$x]/GPUTargetFanSpeed=$NEW_GPU_FAN >/dev/null
	Logger "Fanspeed set to $NEW_GPU_FAN for nVidia GPU: $x"
elif [ $Vendor == "amdgpu" ]; then
	/usr/local/bin/ohgodatool -i $x --set-fanspeed $NEW_GPU_FAN
	Logger "Fanspeed set to $NEW_GPU_FAN for AMD GPU: $x"
else
	Logger "No Vendor defined"
	exit 0
fi
x=$((x+1))
done
;;
	--gstat)
x=0
while [ $x -lt $GPU_COUNT ]; do
if [ $Vendor == "nvidia" ]; then
	statgclk=`nvidia-smi -i $x --query-gpu=clocks.gr --format=csv |tail -n +2`
	statmclk=`nvidia-smi -i $x --query-gpu=clocks.mem --format=csv |tail -n +2`
	statpwr=`nvidia-smi -i $x --query-gpu=power.draw --format=csv |tail -n +2`
	statpst=`nvidia-smi -i $x --query-gpu=pstate --format=csv |tail -n +2`
	statfan=`nvidia-smi -i $x --query-gpu=fan.speed --format=csv |tail -n +2`
	stattemp=`nvidia-smi -i $x --query-gpu=temperature.gpu --format=csv |tail -n +2`

#
# Not all(very few) nVidia Pascal GPUs support voltage monitor on linux so I will not bother adding it
#
	Logger "Current nVidia GPU: $x Core Clock is: $statgclk"
	Logger "Current nVidia GPU: $x Memory Clock is: $statmclk"
	Logger "Current nVidia GPU: $x Power Usage is: $statpwr"
	Logger "Current nVidia GPU: $x Power State is: $statpst"
	Logger "Current nVidia GPU: $x Fan Speed is: $statfan"
	Logger "Current nVidia GPU: $x Temperature is: $stattemp C"
elif [ $Vendor == "amdgpu" ]; then
        if [ -f /sys/class/drm/card$x/device/pp_table ]; then
                statgclk=`cat /sys/class/drm/card$x/device/pp_dpm_sclk |grep "*" | awk -F  " " '{print $2}' | tr -d 'Mhz' | tr '\n' ' '`
                statmclk=`cat /sys/class/drm/card$x/device/pp_dpm_mclk |grep "*" | awk -F  " " '{print $2}' | tr -d 'Mhz' | tr '\n' ' '`
        fi
#               ONLY IN 4.12+
        if [ -f /sys/kernel/debug/dri/$x/amdgpu_pm_info ]; then
                statpwr=`cat /sys/kernel/debug/dri/$x/amdgpu_pm_info |grep '(average GPU)'|awk '{print $1}'| sed 's/ //g'`
        fi
	Logger "Current AMD GPU: $x Core Clock is: $statgclk"
	Logger "Current AMD GPU: $x Memory Clock is: $statmclk"
	Logger "Current AMD GPU: $x Power Usage is: $statpwr"
# Will be Adding voltage support soon for AMDGPU
else
	Logger "No Vendor defined"
	exit 0
fi
x=$((x+1))
done
;;
	--list)
if [ $Vendor == "nvidia" ]; then
	NVLST=`lspci -n -v | grep -c "0300: 10de"`
	if [ $NVLST -gt 0 ]; then
	  NV_DESC=`nvidia-smi -L`
	Logger "Found nVidia GPUs:
	$NV_DESC"
	else
	Logger "No nVidia GPUs Found"
	fi
elif [ $Vendor == "amdgpu" ]; then
	AMDLST=`lspci -n -v |grep -c "0300: 1002"`
        if [ $AMDLST -gt 0 ]; then
          AMD_DESC=`/usr/local/bin/amdmeminfo -q -s -o`
        Logger "Found AMD GPUs:
        $AMD_DESC"
        else
        Logger "No AMD GPUs Found"
        fi
else
	Logger "No Vendor defined"
	exit 0
fi 
;;
	--help|-h|*)
	echo "Usage: '--start','--stop' to start or stop miner"
	echo "Usage: '--mstat' to view current mining stats and '--watchdog' to check for dead GPUs"
        echo "Usage: '--setclocks', '--setfanspeed' to apply settings per GPU defined in conf.json"
        echo "Usage: '--gstat', '--list', '--monitor' for current GPU stats"
        echo "Usage: '--setvoltage' to set voltages for AMD GPUs currently *NOT IN FREE VERSION*"
	echo "Donation addresses"
	echo -e "Zec: \033[1mt1WMvBRutsSCW3c4p6uFvx6SP7nQDJPBdCc\033[0m"
	echo -e "Ether: \033[1m0xE1D39706a292a349D719E9f63dB04eB0a6E09c9D\033[0m"
	echo -e "BTC: \033[1m3KpA1zs7W6hd2YYqXFHX5cjyLTi8nBKpZN\033[0m"
	echo -e "LTC: \033[1mM9r2gXp6N1tvbbaKmQ5CVYBEAEzUsx9Nps\033[0m"
	echo "Enjoy!"
	exit 0
;;
esac
exit 0
